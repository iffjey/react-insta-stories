!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define("Stories",["React"],t):"object"==typeof exports?exports.Stories=t(require("react")):e.Stories=t(e.React)}(this,(function(e){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(t,r){t.exports=e},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var o=n(r(0));t.initialContext={defaultInterval:4e3,width:360,height:640};var i=o.default.createContext(t.initialContext);t.default=i},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var o=n(r(0));t.initialContext={stories:[]};var i=o.default.createContext(t.initialContext);t.default=i},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0));t.default=o.default.createContext({currentId:0,videoDuration:0,bufferAction:!1,pause:!1,next:function(){}})},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(0)),a=o(r(18));t.default=function(e){var t=e.story,r=e.globalHeader,o=e.children;return i.default.createElement(i.default.Fragment,null,o,t.header&&i.default.createElement("div",{style:{position:"absolute",left:12,top:20,zIndex:19}},"object"===n(t)?r?r(t.header):i.default.createElement(a.default,{heading:t.header.heading,subheading:t.header.subheading,profileImage:t.header.profileImage}):null))}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),s=l(r(19));t.default=function(e){var t=e.story,r=e.action,o=e.customCollapsed,i=e.children,a=n(c.useState(!1),2),u=a[0],l=a[1],f=s.default;return c.default.createElement(c.default.Fragment,null,i,t.seeMore&&c.default.createElement("div",{style:{position:"absolute",margin:"auto",bottom:u?"unset":0,zIndex:9999,width:"100%",height:u?"100%":"auto"}},c.default.createElement(f,{action:r,toggleMore:function(e){r(e?"pause":"play"),l(e)},showContent:u,seeMoreContent:t.seeMore,customCollapsed:o||t.seeMoreCollapsed})))}},function(e,t,r){var n=r(15),o=r(16);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};n(o,i);e.exports=o.locals||{}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var a=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return u(t,e),t},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WithSeeMore=t.WithHeader=void 0;var s=l(r(0)),f=c(r(8)),d=c(r(1)),p=c(r(2)),y=r(12),h=r(13),v=c(r(4)),m=c(r(5)),b=function(e){var t=e.renderers?e.renderers.concat(h.renderers):h.renderers,r={width:e.width,height:e.height,loader:e.loader,header:e.header,storyStyles:e.storyStyles,loop:e.loop,defaultInterval:e.defaultInterval,isPaused:e.isPaused,currentIndex:e.currentIndex,renderNavigationControl:e.renderNavigationControl,onNextStory:e.onNextStory,onPreviousStory:e.onPreviousStory,onStoryStart:e.onStoryStart,onStoryEnd:e.onStoryEnd,onAllStoriesEnd:e.onAllStoriesEnd,controlsNavigation:e.controlsNavigation,keyboardNavigation:e.keyboardNavigation},n=o(s.useState({stories:g(e.stories,t)}),2),i=n[0],a=n[1];return s.useEffect((function(){a({stories:g(e.stories,t)})}),[e.stories,e.renderers]),s.default.createElement(d.default.Provider,{value:r},s.default.createElement(p.default.Provider,{value:i},s.default.createElement(f.default,null)))},g=function(e,t){return e.map((function(e){var r={};"string"==typeof e?(r.url=e,r.type="image"):"object"===n(e)&&(r=Object.assign(r,e));var o=y.getRenderer(r,t);return r.originalContent=r.content,r.content=o,r}))};b.defaultProps={width:360,height:640,defaultInterval:4e3},t.WithHeader=v.default,t.WithSeeMore=m.default,t.default=b},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),s=l(r(1)),f=l(r(2)),d=l(r(3)),p=l(r(9)),y=l(r(10));t.default=function(){var e=n(c.useState(0),2),t=e[0],r=e[1],o=n(c.useState(!0),2),i=o[0],a=o[1],u=n(c.useState(!0),2),l=u[0],v=u[1],m=n(c.useState(0),2),b=m[0],g=m[1],_=c.useRef(),j=c.useContext(s.default),O=j.width,w=j.height,S=j.loop,x=j.currentIndex,M=j.isPaused,E=j.controlsNavigation,C=j.renderNavigationControl,P=j.keyboardNavigation,I=j.onPreviousStory,A=j.onNextStory,D=c.useContext(f.default).stories;c.useEffect((function(){"number"==typeof x&&(x>=0&&x<D.length?r(x):console.error("Index out of bounds. Current index was set to value more than the length of stories array.",x))}),[x]),c.useEffect((function(){"boolean"==typeof M&&a(M)}),[M]),c.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof P&&P)return document.addEventListener("keydown",k),function(){document.removeEventListener("keydown",k)}}),[t,P]);var k=function(e){"ArrowLeft"===e.key?R():"ArrowRight"===e.key&&N()},T=function(e,t){a("pause"===e),v(!!t)},R=function(){var e=t>0,n=t-1;if(r(e?n:t),I){var o=e?[n,D[n]]:[null,null];I.apply(void 0,o)}},N=function(){S?z():L()},z=function(){var e=(t+1)%D.length;r(e),A&&A(e,D[e])},L=function(){var e=t<D.length-1,n=t+1;if(r(e?n:t),A){var o=e?[n,D[n]]:[null,null];A.apply(void 0,o)}},U=function(e){e.preventDefault(),_.current=setTimeout((function(){T("pause")}),200)},B=function(e,t){e.preventDefault(),_.current&&clearTimeout(_.current),i?T("play"):"next"===t?N():R()};return c.default.createElement("div",{style:Object.assign(Object.assign({},h.container),{width:O,height:w})},c.default.createElement(d.default.Provider,{value:{bufferAction:l,videoDuration:b,currentId:t,pause:i,next:N}},c.default.createElement(y.default,null)),c.default.createElement(p.default,{action:T,bufferAction:l,playState:i,story:D[t],getVideoDuration:function(e){g(1e3*e)}}),c.default.createElement("div",{style:h.overlay},c.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:U,onTouchEnd:function(e){return B(e,"previous")},onMouseDown:U,onMouseUp:function(e){return B(e,"previous")}}),c.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:U,onTouchEnd:function(e){return B(e,"next")},onMouseDown:U,onMouseUp:function(e){return B(e,"next")}})),E&&C&&c.default.createElement("div",{style:h.overlay},C({direction:"previous",onClick:R}),C({direction:"next",onClick:N})))};var h={container:{display:"flex",flexDirection:"column",background:"#111",position:"relative"},overlay:{position:"absolute",height:"inherit",width:"inherit",display:"flex"}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(0)),l=a(r(1)),c={story:{display:"flex",position:"relative",overflow:"hidden"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.default=function(e){var t,r,n=u.useContext(l.default),o=n.width,i=n.height,a=n.loader,s=n.header,f=n.storyStyles,d=function(t,r){switch(t){case"UPDATE_VIDEO_DURATION":return e.getVideoDuration(r.duration),{ack:"OK"}}};return u.default.createElement("div",{style:Object.assign(Object.assign({},c.story),{width:o,height:i})},(t=e.story.content,r={width:o,height:i,loader:a,header:s,storyStyles:f},u.default.createElement(t,{action:e.action,isPaused:e.playState,story:e.story,config:r,messageHandler:d})))}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),s=l(r(11)),f=l(r(3)),d=l(r(1)),p=l(r(2));t.default=function(){var e=n(c.useState(0),2),t=e[0],r=e[1],o=c.useContext(f.default),i=o.currentId,a=o.next,u=o.videoDuration,l=o.pause,h=c.useContext(d.default),v=h.defaultInterval,m=h.onStoryEnd,b=h.onStoryStart,g=h.onAllStoriesEnd,_=c.useContext(p.default).stories,j=c.useRef(),O=c.useRef();console.log("render::pause",{pause:l}),c.useLayoutEffect((function(){return console.log("progress array::use effect"),l||(console.log("progress array::use effect::not pause start"),j.current=requestAnimationFrame((function e(){console.log("progress array::increment count"),0===O.current&&w(),r((function(e){var t=M(),r=Math.min(e+100/(t/1e3*60),100);return O.current=r,r})),O.current<100?(console.log("progress array::increment count::raw retry"),j.current=requestAnimationFrame(e)):(console.log("progress array::increment count::cancel"),cancelAnimationFrame(j.current),S(),i===_.length-1?x():r(0),a())}))),function(){console.log("progress array::use effect::teardown cancel"),cancelAnimationFrame(j.current)}}),[i,l]),c.useEffect((function(){r(0)}),[i,_]);var w=function(){b&&b(i,_[i])},S=function(){m&&m(i,_[i])},x=function(){g&&g(i,_)},M=function(){return"video"===_[i].type?u:"number"==typeof _[i].duration?_[i].duration:v};return c.default.createElement("div",{style:y.progressArr},_.map((function(e,r){return c.default.createElement(s.default,{key:r,count:t,active:(n=r,n===i?t>=100?2:1:n<i?2:0)});var n})))};var y={progressArr:{boxSizing:"border-box",position:"absolute",display:"grid",gridAutoFlow:"column",gridGap:"3px",width:"100%",padding:"9px",zIndex:99,filter:"drop-shadow(0 1px 8px #222)"}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(0)),l=a(r(3));t.default=function(e){var t=e.active,r=e.count,n=u.useContext(l.default),o=n.bufferAction,i=n.pause;return u.default.createElement("div",{style:Object.assign(Object.assign({},c.wrapper),{opacity:i&&!o?0:1})},u.default.createElement("div",{style:Object.assign(Object.assign({},c.progress),function(){switch(t){case 2:return{transform:"translateX(0)"};case 1:return{transform:"translateX(".concat(-100+r,"%)"),borderRadius:"3px"};case 0:default:return{transform:"translateX(-101%)"}}}())}))};var c={wrapper:{height:"2px",borderRadius:"3px",background:"#555",overflow:"hidden",transition:"opacity 400ms ease-in-out"},progress:{background:"#fff",height:"100%",willChange:"transform"}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRenderer=void 0,t.getRenderer=function(e,t){var r=t.map((function(t){return Object.assign(Object.assign({},t),{testerResult:t.tester(e)})})).filter((function(e){return e.testerResult.condition}));return r.sort((function(e,t){return t.testerResult.priority-e.testerResult.priority})),r[0].renderer}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderers=void 0;var o=n(r(14)),i=n(r(20)),a=n(r(21)),u=n(r(22));t.renderers=[o.default,i.default,u.default,a.default]},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var c=u(r(0)),s=l(r(6)),f=l(r(4)),d=l(r(5));t.renderer=function(e){var t=e.story,r=e.action,o=(e.isPaused,e.config),i=n(c.useState(!1),2),a=i[0],u=i[1],l=o.width,y=o.height,h=o.loader,v=o.storyStyles,m=Object.assign(Object.assign({},p.storyContent),v||{});return c.createElement(f.default,{story:t,globalHeader:o.header},c.createElement(d.default,{story:t,action:r},c.createElement("div",null,c.createElement("img",{style:m,src:t.url,onLoad:function(){u(!0),r("play")}}),!a&&c.createElement("div",{style:{width:l,height:y,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},h||c.createElement("div",{className:s.default.spinner})))))};var p={story:{display:"flex",position:"relative",overflow:"hidden"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.tester=function(e){return{condition:!(e.content||e.type&&"image"!==e.type),priority:2}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},i=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),a=[];function u(e){for(var t=-1,r=0;r<a.length;r++)if(a[r].identifier===e){t=r;break}return t}function l(e,t){for(var r={},n=[],o=0;o<e.length;o++){var i=e[o],l=t.base?i[0]+t.base:i[0],c=r[l]||0,s="".concat(l," ").concat(c);r[l]=c+1;var f=u(s),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:v(d,t),references:1}),n.push(s)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,r){var n=r.css,o=r.media,i=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var y=null,h=0;function v(e,t){var r,n,o;if(t.singleton){var i=h++;r=y||(y=c(t)),n=d.bind(null,r,i,!1),o=d.bind(null,r,i,!0)}else r=c(t),n=p.bind(null,r,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var r=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var o=u(r[n]);a[o].references--}for(var i=l(e,t),c=0;c<r.length;c++){var s=u(r[c]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}r=i}}}},function(e,t,r){(t=r(17)(!1)).push([e.i,"._1CK7FHVwhiOnuCiZJwiPq1 {\n\twidth: 40px;\n\theight: 40px;\n\tmargin: 100px auto;\n\tbackground-color: #fff;\n\n\tborder-radius: 100%;\n\t-webkit-animation: _1hEQ2VzIkTiZ-9jZoLI3JC 1s infinite ease-in-out;\n\tanimation: _1hEQ2VzIkTiZ-9jZoLI3JC 1s infinite ease-in-out;\n}\n\n@-webkit-keyframes _1hEQ2VzIkTiZ-9jZoLI3JC {\n\t0% {\n\t\t-webkit-transform: scale(0);\n\t}\n\t100% {\n\t\t-webkit-transform: scale(1);\n\t\topacity: 0;\n\t}\n}\n\n@keyframes _1hEQ2VzIkTiZ-9jZoLI3JC {\n\t0% {\n\t\t-webkit-transform: scale(0);\n\t\ttransform: scale(0);\n\t}\n\t100% {\n\t\t-webkit-transform: scale(1);\n\t\ttransform: scale(1);\n\t\topacity: 0;\n\t}\n}\n",""]),t.locals={spinner:"_1CK7FHVwhiOnuCiZJwiPq1","sk-scaleout":"_1hEQ2VzIkTiZ-9jZoLI3JC"},e.exports=t},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var o=(a=n,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(i).concat([o]).join("\n")}var a,u,l;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);n&&o[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),t.push(l))}},t}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),i={main:{display:"flex",alignItems:"center"},img:{width:40,height:40,borderRadius:40,marginRight:10,filter:"drop-shadow(0 0px 2px rgba(0, 0, 0, 0.5))",border:"2px solid rgba(255, 255, 255, 0.8)"},text:{display:"flex",flexDirection:"column",filter:"drop-shadow(0 0px 3px rgba(0, 0, 0, 0.9))"},heading:{fontSize:"1rem",color:"rgba(255, 255, 255, 0.9)",margin:0,marginBottom:2},subheading:{fontSize:"0.6rem",color:"rgba(255, 255, 255, 0.8)",margin:0}};t.default=function(e){var t=e.profileImage,r=e.heading,n=e.subheading;return o.default.createElement("div",{style:i.main},t&&o.default.createElement("img",{style:i.img,src:t}),o.default.createElement("span",{style:i.text},o.default.createElement("p",{style:i.heading},r),o.default.createElement("p",{style:i.subheading},n)))}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(0)),l=a(r(1));t.default=function(e){var t=e.seeMoreContent,r=e.customCollapsed,n=u.useContext(l.default).keyboardNavigation;u.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof n&&n)return document.addEventListener("keydown",o),function(){document.removeEventListener("keydown",o)}}),[n]);var o=function(t){"ArrowUp"===t.key?(t.preventDefault(),e.toggleMore(!0)):"ArrowDown"!==t.key&&"Escape"!==t.key||(t.preventDefault(),e.toggleMore(!1))};return e.showContent?u.default.createElement("div",{style:c.seeMoreExpanded},u.default.createElement(t,{close:function(){return e.toggleMore(!1)}})):r?u.default.createElement(r,{action:e.action,toggleMore:e.toggleMore}):u.default.createElement("div",{style:c.seeMore,onClick:function(t){t.preventDefault(),t.stopPropagation(),e.toggleMore(!0)}},u.default.createElement("span",{style:c.seeMoreIcon},"⌃"),u.default.createElement("span",{style:c.seeMoreText},"See more"))};var c={seeMore:{height:"10vh",background:"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2))",display:"flex",flexDirection:"column",width:"100%",alignItems:"center",justifyContent:"flex-end",bottom:0},seeMoreExpanded:{position:"absolute",top:0,left:0,width:"100%",height:"100%",boxSizing:"border-box",zIndex:99999},seeMoreText:{color:"white",textAlign:"center",letterSpacing:"0.1em",marginBottom:"2.2vh",textTransform:"capitalize",opacity:"1",fontSize:"0.8em",transition:"opacity 300ms ease-in-out"},seeMoreIcon:{color:"white",textAlign:"center",letterSpacing:"0.2em",marginBottom:"0.4vh",opacity:"1",filter:"drop-shadow(0 0 5px black)",textTransform:"capitalize",transition:"opacity 300ms ease-in-out"},seeMoreClose:{position:"absolute",filter:"drop-shadow(0 3px 2px #ccc)",right:"0.5rem",top:"0.5rem",fontSize:"1.5rem",opacity:"0.7",padding:"1rem"}}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var c=u(r(0)),s=l(r(6)),f=l(r(4)),d=l(r(5));t.renderer=function(e){var t=e.story,r=e.action,o=e.isPaused,i=e.config,a=e.messageHandler,u=n(c.useState(!1),2),l=u[0],y=u[1],h=n(c.useState(!1),2),v=h[0],m=h[1],b=i.width,g=i.height,_=i.loader,j=i.storyStyles,O=Object.assign(Object.assign({},p.storyContent),j||{}),w=c.useRef(null);c.useEffect((function(){r("pause",!0)}),[]),c.useEffect((function(){w.current&&(o?w.current.pause():w.current.play().catch((function(){})))}),[o]);return c.createElement(f.default,{story:t,globalHeader:i.header},c.createElement(d.default,{story:t,action:r},c.createElement("div",{style:p.videoContainer},c.createElement("video",{ref:w,style:O,src:t.url,controls:!1,onLoadedData:function(){a("UPDATE_VIDEO_DURATION",{duration:w.current.duration}),y(!0),w.current.play().then((function(){r("play")})).catch((function(){m(!0),w.current.play().finally((function(){r("play")}))}))},playsInline:!0,onWaiting:function(){r("pause",!0)},onPlaying:function(){r("play",!0)},muted:v}),!l&&c.createElement("div",{style:{width:b,height:g,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},_||c.createElement("div",{className:s.default.spinner})))))};var p={storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"},videoContainer:{display:"flex",alignItems:"center",justifyContent:"center"}};t.tester=function(e){return{condition:"video"===e.type,priority:2}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=i(r(0));t.renderer=function(e){var t=e.story,r=e.action;return a.useEffect((function(){r("play")}),[t]),a.createElement("div",{style:u.storyContent},a.createElement("p",{style:u.text},"This story could not be loaded."))};var u={storyContent:{width:"100%",maxHeight:"100%",margin:"auto"},text:{textAlign:"center",color:"white",width:"90%",margin:"auto"}};t.tester=function(){return{condition:!0,priority:1}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=i(r(0));t.renderer=function(e){a.useEffect((function(){e.action("play")}),[e.story]);var t=e.story.originalContent;return a.createElement(t,Object.assign({},e))},t.tester=function(e){return{condition:!!e.content,priority:2}},t.default={renderer:t.renderer,tester:t.tester}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TdG9yaWVzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9TdG9yaWVzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1N0b3JpZXMvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJhbWRcIjpcIlJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifSIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL2NvbnRleHQvR2xvYmFsLnRzIiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29udGV4dC9TdG9yaWVzLnRzIiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29udGV4dC9Qcm9ncmVzcy50cyIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy93cmFwcGVycy93aXRoSGVhZGVyLnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy93cmFwcGVycy93aXRoU2VlTW9yZS50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9zdHlsZXMuY3NzP2JiYmYiLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL0NvbnRhaW5lci50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL1N0b3J5LnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL2NvbXBvbmVudHMvUHJvZ3Jlc3NBcnJheS50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL1Byb2dyZXNzLnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3V0aWwvcmVuZGVyZXJzLnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy9pbmRleC50cyIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy9JbWFnZS50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL1NlZU1vcmUudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvcmVuZGVyZXJzL1ZpZGVvLnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy9EZWZhdWx0LnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy9BdXRvUGxheUNvbnRlbnQudHN4Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImluaXRpYWxDb250ZXh0IiwiZGVmYXVsdEludGVydmFsIiwid2lkdGgiLCJoZWlnaHQiLCJHbG9iYWxDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInN0b3JpZXMiLCJTdG9yaWVzQ29udGV4dCIsImN1cnJlbnRJZCIsInZpZGVvRHVyYXRpb24iLCJidWZmZXJBY3Rpb24iLCJwYXVzZSIsIm5leHQiLCJzdG9yeSIsImdsb2JhbEhlYWRlciIsImNoaWxkcmVuIiwiaGVhZGVyIiwic3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJ0b3AiLCJ6SW5kZXgiLCJoZWFkaW5nIiwic3ViaGVhZGluZyIsInByb2ZpbGVJbWFnZSIsImFjdGlvbiIsImN1c3RvbUNvbGxhcHNlZCIsInVzZVN0YXRlIiwic2hvd01vcmUiLCJzZXRTaG93TW9yZSIsIkNvbGxhcHNlZENvbXBvbmVudCIsInNlZU1vcmUiLCJtYXJnaW4iLCJib3R0b20iLCJ0b2dnbGVNb3JlIiwic2hvdyIsInNob3dDb250ZW50Iiwic2VlTW9yZUNvbnRlbnQiLCJzZWVNb3JlQ29sbGFwc2VkIiwiYXBpIiwiY29udGVudCIsImRlZmF1bHQiLCJvcHRpb25zIiwibG9jYWxzIiwiUmVhY3RJbnN0YVN0b3JpZXMiLCJwcm9wcyIsInJlbmRlcmVycyIsImNvbmNhdCIsImNvbnRleHQiLCJsb2FkZXIiLCJzdG9yeVN0eWxlcyIsImxvb3AiLCJpc1BhdXNlZCIsImN1cnJlbnRJbmRleCIsInJlbmRlck5hdmlnYXRpb25Db250cm9sIiwib25OZXh0U3RvcnkiLCJvblByZXZpb3VzU3RvcnkiLCJvblN0b3J5U3RhcnQiLCJvblN0b3J5RW5kIiwib25BbGxTdG9yaWVzRW5kIiwiY29udHJvbHNOYXZpZ2F0aW9uIiwia2V5Ym9hcmROYXZpZ2F0aW9uIiwiZ2VuZXJhdGVTdG9yaWVzIiwic2V0U3RvcmllcyIsInVzZUVmZmVjdCIsIlByb3ZpZGVyIiwibWFwIiwidXJsIiwidHlwZSIsImFzc2lnbiIsInJlbmRlcmVyIiwiZ2V0UmVuZGVyZXIiLCJvcmlnaW5hbENvbnRlbnQiLCJkZWZhdWx0UHJvcHMiLCJXaXRoSGVhZGVyIiwiV2l0aFNlZU1vcmUiLCJzZXRDdXJyZW50SWQiLCJzZXRQYXVzZSIsInNldEJ1ZmZlckFjdGlvbiIsInNldFZpZGVvRHVyYXRpb24iLCJtb3VzZWRvd25JZCIsInVzZVJlZiIsInVzZUNvbnRleHQiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVLZXlEb3duIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2aW91cyIsInRvZ2dsZVN0YXRlIiwiaGFzUHJldmlvdXMiLCJwcmV2aW91c0lkIiwiYXJncyIsInVwZGF0ZU5leHRTdG9yeUlkRm9yTG9vcCIsInVwZGF0ZU5leHRTdG9yeUlkIiwibmV4dElkIiwiaGFzTmV4dCIsImRlYm91bmNlUGF1c2UiLCJwcmV2ZW50RGVmYXVsdCIsImN1cnJlbnQiLCJzZXRUaW1lb3V0IiwibW91c2VVcCIsImNsZWFyVGltZW91dCIsInN0eWxlcyIsImNvbnRhaW5lciIsInBsYXlTdGF0ZSIsImdldFZpZGVvRHVyYXRpb24iLCJkdXJhdGlvbiIsIm92ZXJsYXkiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoRW5kIiwib25Nb3VzZURvd24iLCJvbk1vdXNlVXAiLCJkaXJlY3Rpb24iLCJvbkNsaWNrIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJiYWNrZ3JvdW5kIiwib3ZlcmZsb3ciLCJzdG9yeUNvbnRlbnQiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIklubmVyQ29udGVudCIsImNvbmZpZyIsImdsb2JhbENvbnRleHQiLCJyZW5kZXJlck1lc3NhZ2VIYW5kbGVyIiwiZGF0YSIsImFjayIsIm1lc3NhZ2VIYW5kbGVyIiwiY291bnQiLCJzZXRDb3VudCIsImFuaW1hdGlvbkZyYW1lSWQiLCJjb3VudFJlZiIsImxvZyIsInVzZUxheW91dEVmZmVjdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImluY3JlbWVudENvdW50Iiwic3RvcnlTdGFydENhbGxiYWNrIiwiaW50ZXJ2YWwiLCJnZXRDdXJyZW50SW50ZXJ2YWwiLCJuZXdDb3VudCIsIk1hdGgiLCJtaW4iLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInN0b3J5RW5kQ2FsbGJhY2siLCJhbGxTdG9yaWVzRW5kQ2FsbGJhY2siLCJwcm9ncmVzc0FyciIsIl8iLCJhY3RpdmUiLCJpbmRleCIsImJveFNpemluZyIsImdyaWRBdXRvRmxvdyIsImdyaWRHYXAiLCJwYWRkaW5nIiwiZmlsdGVyIiwid3JhcHBlciIsIm9wYWNpdHkiLCJwcm9ncmVzcyIsInRyYW5zZm9ybSIsImJvcmRlclJhZGl1cyIsImdldFByb2dyZXNzU3R5bGUiLCJ0cmFuc2l0aW9uIiwid2lsbENoYW5nZSIsInByb2JhYmxlIiwidGVzdGVyUmVzdWx0IiwidGVzdGVyIiwiY29uZGl0aW9uIiwic29ydCIsImEiLCJiIiwicHJpb3JpdHkiLCJSZWFjdCIsImxvYWRlZCIsInNldExvYWRlZCIsImNvbXB1dGVkU3R5bGVzIiwic3JjIiwib25Mb2FkIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiY29sb3IiLCJjbGFzc05hbWUiLCJzcGlubmVyIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwibGlzdCIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJpZCIsImJhc2UiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsInRvU3RyaW5nIiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm1haW4iLCJpbWciLCJtYXJnaW5SaWdodCIsImJvcmRlciIsInRleHQiLCJmb250U2l6ZSIsIm1hcmdpbkJvdHRvbSIsIlNlZU1vcmVDb250ZW50IiwiQ3VzdG9tQ29sbGFwc2VkIiwic2VlTW9yZUV4cGFuZGVkIiwiY2xvc2UiLCJzdG9wUHJvcGFnYXRpb24iLCJzZWVNb3JlSWNvbiIsInNlZU1vcmVUZXh0IiwidGV4dEFsaWduIiwibGV0dGVyU3BhY2luZyIsInRleHRUcmFuc2Zvcm0iLCJzZWVNb3JlQ2xvc2UiLCJyaWdodCIsIm11dGVkIiwic2V0TXV0ZWQiLCJ2aWQiLCJwbGF5IiwidmlkZW9Db250YWluZXIiLCJyZWYiLCJjb250cm9scyIsIm9uTG9hZGVkRGF0YSIsInRoZW4iLCJwbGF5c0lubGluZSIsIm9uV2FpdGluZyIsIm9uUGxheWluZyIsIkNvbnRlbnQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFVBQ1IsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxVQUFXLENBQUMsU0FBVUosR0FDSCxpQkFBWkMsUUFDZEEsUUFBaUIsUUFBSUQsRUFBUUcsUUFBUSxVQUVyQ0osRUFBYyxRQUFJQyxFQUFRRCxFQUFZLE9BUnhDLENBU0dPLE1BQU0sU0FBU0MsR0FDbEIsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVULFFBR25DLElBQUlDLEVBQVNNLEVBQWlCRSxHQUFZLENBQ3pDQyxFQUFHRCxFQUNIRSxHQUFHLEVBQ0hYLFFBQVMsSUFVVixPQU5BWSxFQUFRSCxHQUFVSSxLQUFLWixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTUSxHQUcvRFAsRUFBT1UsR0FBSSxFQUdKVixFQUFPRCxRQTBEZixPQXJEQVEsRUFBb0JNLEVBQUlGLEVBR3hCSixFQUFvQk8sRUFBSVIsRUFHeEJDLEVBQW9CUSxFQUFJLFNBQVNoQixFQUFTaUIsRUFBTUMsR0FDM0NWLEVBQW9CVyxFQUFFbkIsRUFBU2lCLElBQ2xDRyxPQUFPQyxlQUFlckIsRUFBU2lCLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVYsRUFBb0JnQixFQUFJLFNBQVN4QixHQUNYLG9CQUFYeUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlckIsRUFBU3lC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QixhQUFjLENBQ1Z6SCxNQUFPLE9BQ1AySCxVQUFXLE9BQ1g3RixPQUFRLFFBRVp1UCxLQUFNLENBQ0ZVLFVBQVcsU0FDWDFHLE1BQU8sUUFDUHJMLE1BQU8sTUFDUDhCLE9BQVEsU0FJSCxFQUFBeUksT0FBaUIsV0FDMUIsTUFBTyxDQUNIQyxXQUFXLEVBQ1hJLFNBQVUsSUFJbEIsVUFBZSxDQUNYeEcsU0FBQSxFQUFBQSxTQUNBbUcsT0FBQSxFQUFBQSxTLDRuQkN2Q0osY0FHYSxFQUFBbkcsU0FBcUIsU0FBQ3pCLEdBQy9Ca0ksRUFBTS9HLFdBQVUsV0FDWm5CLEVBQU1wQixPQUFPLFVBQ2QsQ0FBQ29CLEVBQU1oQyxRQUNWLElBQU1xUyxFQUFVclEsRUFBTWhDLE1BQU0yRCxnQkFDNUIsT0FBTyxnQkFBQzBPLEVBQU8saUJBQUtyUSxLQUdYLEVBQUE0SCxPQUFpQixTQUFDNUosR0FDM0IsTUFBTyxDQUNINkosWUFBYTdKLEVBQU0yQixRQUNuQnNJLFNBQVUsSUFJbEIsVUFBZSxDQUNYeEcsU0FBQSxFQUFBQSxTQUNBbUcsT0FBQSxFQUFBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiU3Rvcmllc1wiLCBbXCJSZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJTdG9yaWVzXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlN0b3JpZXNcIl0gPSBmYWN0b3J5KHJvb3RbXCJSZWFjdFwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2xvYmFsQ3R4IH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsQ29udGV4dCA9IHtcblx0ZGVmYXVsdEludGVydmFsOiA0MDAwLFxuXHR3aWR0aDogMzYwLFxuXHRoZWlnaHQ6IDY0MCxcbn07XG5cbmNvbnN0IEdsb2JhbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEdsb2JhbEN0eD4oaW5pdGlhbENvbnRleHQpO1xuXG5leHBvcnQgZGVmYXVsdCBHbG9iYWxDb250ZXh0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG5cdFN0b3JpZXNDb250ZXh0IGFzIFN0b3JpZXNDb250ZXh0SW50ZXJmYWNlLFxuXHRTdG9yeSxcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsQ29udGV4dDogeyBzdG9yaWVzOiBTdG9yeVtdIH0gPSB7XG5cdHN0b3JpZXM6IFtdLFxufTtcblxuY29uc3QgU3Rvcmllc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFN0b3JpZXNDb250ZXh0SW50ZXJmYWNlPihcblx0aW5pdGlhbENvbnRleHRcbik7XG5cbmV4cG9ydCBkZWZhdWx0IFN0b3JpZXNDb250ZXh0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUHJvZ3Jlc3NDb250ZXh0IH0gZnJvbSAnLi8uLi9pbnRlcmZhY2VzJ1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0PFByb2dyZXNzQ29udGV4dD4oe1xuICAgIGN1cnJlbnRJZDogMCxcbiAgICB2aWRlb0R1cmF0aW9uOiAwLFxuICAgIGJ1ZmZlckFjdGlvbjogZmFsc2UsXG4gICAgcGF1c2U6IGZhbHNlLFxuICAgIG5leHQ6ICgpID0+IHsgfVxufSkiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3RvcnkgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4vLi4vLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcblxuY29uc3Qgd2l0aEhlYWRlcjogUmVhY3QuRkM8eyBzdG9yeTogU3RvcnksIGdsb2JhbEhlYWRlcjogRnVuY3Rpb24gfT4gPSAoeyBzdG9yeSwgZ2xvYmFsSGVhZGVyLCBjaGlsZHJlbiB9KSA9PiB7XG4gICAgcmV0dXJuIDw+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAge3N0b3J5LmhlYWRlciAmJiAoXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGxlZnQ6IDEyLCB0b3A6IDIwLCB6SW5kZXg6IDE5IH19PlxuICAgICAgICAgICAgICAgIHt0eXBlb2Ygc3RvcnkgPT09IFwib2JqZWN0XCIgPyAoXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEhlYWRlciA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbEhlYWRlcihzdG9yeS5oZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEhlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nPXtzdG9yeS5oZWFkZXIuaGVhZGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViaGVhZGluZz17c3RvcnkuaGVhZGVyLnN1YmhlYWRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbWFnZT17c3RvcnkuaGVhZGVyLnByb2ZpbGVJbWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgPC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhIZWFkZXI7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudFR5cGUsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQWN0aW9uLCBTZWVNb3JlUHJvcHMsIFN0b3J5IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgU2VlTW9yZSBmcm9tIFwiLi8uLi8uLi9jb21wb25lbnRzL1NlZU1vcmVcIjtcblxuY29uc3Qgd2l0aFNlZU1vcmU6IFJlYWN0LkZDPHtcbiAgICBzdG9yeTogU3RvcnksXG4gICAgYWN0aW9uOiBBY3Rpb24sXG4gICAgY3VzdG9tQ29sbGFwc2VkPzogU2VlTW9yZVByb3BzW1wiY3VzdG9tQ29sbGFwc2VkXCJdXG59PiA9ICh7IHN0b3J5LCBhY3Rpb24sIGN1c3RvbUNvbGxhcHNlZCwgY2hpbGRyZW4gfSkgPT4ge1xuICAgIGNvbnN0IFtzaG93TW9yZSwgc2V0U2hvd01vcmVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHRvZ2dsZU1vcmUgPSAoc2hvdykgPT4ge1xuICAgICAgICBhY3Rpb24oc2hvdyA/ICdwYXVzZScgOiAncGxheScpO1xuICAgICAgICBzZXRTaG93TW9yZShzaG93KTtcbiAgICB9XG4gICAgY29uc3QgQ29sbGFwc2VkQ29tcG9uZW50ID0gU2VlTW9yZTtcbiAgICByZXR1cm4gPD5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICB7c3Rvcnkuc2VlTW9yZSAmJiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBzaG93TW9yZSA/ICd1bnNldCcgOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IDk5OTksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzaG93TW9yZSA/ICcxMDAlJyA6ICdhdXRvJ1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENvbGxhcHNlZENvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlTW9yZT17dG9nZ2xlTW9yZX1cbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvbnRlbnQ9e3Nob3dNb3JlfVxuICAgICAgICAgICAgICAgICAgICBzZWVNb3JlQ29udGVudD17c3Rvcnkuc2VlTW9yZX1cbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ29sbGFwc2VkPXtjdXN0b21Db2xsYXBzZWQgfHwgc3Rvcnkuc2VlTW9yZUNvbGxhcHNlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgPC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTZWVNb3JlOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL0B0ZWFtc3VwZXJjZWxsL3R5cGluZ3MtZm9yLWNzcy1tb2R1bGVzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNS0yIS4vc3R5bGVzLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFJlYWN0SW5zdGFTdG9yaWVzUHJvcHMsIEdsb2JhbEN0eCwgU3RvcnksIFRlc3RlciwgUmVuZGVyZXIgfSBmcm9tICcuL2ludGVyZmFjZXMnXG5pbXBvcnQgQ29udGFpbmVyIGZyb20gJy4vY29tcG9uZW50cy9Db250YWluZXInXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tICcuL2NvbnRleHQvR2xvYmFsJ1xuaW1wb3J0IFN0b3JpZXNDb250ZXh0IGZyb20gJy4vY29udGV4dC9TdG9yaWVzJztcbmltcG9ydCB7IGdldFJlbmRlcmVyIH0gZnJvbSAnLi91dGlsL3JlbmRlcmVycydcbmltcG9ydCB7IHJlbmRlcmVycyBhcyBkZWZhdWx0UmVuZGVyZXJzIH0gZnJvbSAnLi9yZW5kZXJlcnMvaW5kZXgnO1xuaW1wb3J0IHdpdGhIZWFkZXIgZnJvbSAnLi9yZW5kZXJlcnMvd3JhcHBlcnMvd2l0aEhlYWRlcidcbmltcG9ydCB3aXRoU2VlTW9yZSBmcm9tICcuL3JlbmRlcmVycy93cmFwcGVycy93aXRoU2VlTW9yZSdcblxuY29uc3QgUmVhY3RJbnN0YVN0b3JpZXMgPSBmdW5jdGlvbiAocHJvcHM6IFJlYWN0SW5zdGFTdG9yaWVzUHJvcHMpIHtcbiAgICBsZXQgcmVuZGVyZXJzID0gcHJvcHMucmVuZGVyZXJzID8gcHJvcHMucmVuZGVyZXJzLmNvbmNhdChkZWZhdWx0UmVuZGVyZXJzKSA6IGRlZmF1bHRSZW5kZXJlcnM7XG4gICAgbGV0IGNvbnRleHQ6IEdsb2JhbEN0eCA9IHtcbiAgICAgICAgd2lkdGg6IHByb3BzLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHByb3BzLmhlaWdodCxcbiAgICAgICAgbG9hZGVyOiBwcm9wcy5sb2FkZXIsXG4gICAgICAgIGhlYWRlcjogcHJvcHMuaGVhZGVyLFxuICAgICAgICBzdG9yeVN0eWxlczogcHJvcHMuc3RvcnlTdHlsZXMsXG4gICAgICAgIGxvb3A6IHByb3BzLmxvb3AsXG4gICAgICAgIGRlZmF1bHRJbnRlcnZhbDogcHJvcHMuZGVmYXVsdEludGVydmFsLFxuICAgICAgICBpc1BhdXNlZDogcHJvcHMuaXNQYXVzZWQsXG4gICAgICAgIGN1cnJlbnRJbmRleDogcHJvcHMuY3VycmVudEluZGV4LFxuICAgICAgICByZW5kZXJOYXZpZ2F0aW9uQ29udHJvbDogcHJvcHMucmVuZGVyTmF2aWdhdGlvbkNvbnRyb2wsXG4gICAgICAgIG9uTmV4dFN0b3J5OiBwcm9wcy5vbk5leHRTdG9yeSxcbiAgICAgICAgb25QcmV2aW91c1N0b3J5OiBwcm9wcy5vblByZXZpb3VzU3RvcnksXG4gICAgICAgIG9uU3RvcnlTdGFydDogcHJvcHMub25TdG9yeVN0YXJ0LFxuICAgICAgICBvblN0b3J5RW5kOiBwcm9wcy5vblN0b3J5RW5kLFxuICAgICAgICBvbkFsbFN0b3JpZXNFbmQ6IHByb3BzLm9uQWxsU3Rvcmllc0VuZCxcbiAgICAgICAgY29udHJvbHNOYXZpZ2F0aW9uOiBwcm9wcy5jb250cm9sc05hdmlnYXRpb24sXG4gICAgICAgIGtleWJvYXJkTmF2aWdhdGlvbjogcHJvcHMua2V5Ym9hcmROYXZpZ2F0aW9uXG4gICAgfVxuICAgIGNvbnN0IFtzdG9yaWVzLCBzZXRTdG9yaWVzXSA9IHVzZVN0YXRlPHsgc3RvcmllczogU3RvcnlbXSB9Pih7IHN0b3JpZXM6IGdlbmVyYXRlU3Rvcmllcyhwcm9wcy5zdG9yaWVzLCByZW5kZXJlcnMpIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldFN0b3JpZXMoeyBzdG9yaWVzOiBnZW5lcmF0ZVN0b3JpZXMocHJvcHMuc3RvcmllcywgcmVuZGVyZXJzKSB9KTtcbiAgICB9LCBbcHJvcHMuc3RvcmllcywgcHJvcHMucmVuZGVyZXJzXSk7XG5cbiAgICByZXR1cm4gPEdsb2JhbENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PlxuICAgICAgICA8U3Rvcmllc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0b3JpZXN9PlxuICAgICAgICAgICAgPENvbnRhaW5lciAvPlxuICAgICAgICA8L1N0b3JpZXNDb250ZXh0LlByb3ZpZGVyPlxuICAgIDwvR2xvYmFsQ29udGV4dC5Qcm92aWRlcj5cbn1cblxuY29uc3QgZ2VuZXJhdGVTdG9yaWVzID0gKHN0b3JpZXM6IFN0b3J5W10sIHJlbmRlcmVyczogeyByZW5kZXJlcjogUmVuZGVyZXIsIHRlc3RlcjogVGVzdGVyIH1bXSkgPT4ge1xuICAgIHJldHVybiBzdG9yaWVzLm1hcChzID0+IHtcbiAgICAgICAgbGV0IHN0b3J5OiBTdG9yeSA9IHt9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN0b3J5LnVybCA9IHM7XG4gICAgICAgICAgICBzdG9yeS50eXBlID0gJ2ltYWdlJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHN0b3J5ID0gT2JqZWN0LmFzc2lnbihzdG9yeSwgcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihzdG9yeSwgcmVuZGVyZXJzKTtcbiAgICAgICAgc3Rvcnkub3JpZ2luYWxDb250ZW50ID0gc3RvcnkuY29udGVudDtcbiAgICAgICAgc3RvcnkuY29udGVudCA9IHJlbmRlcmVyO1xuICAgICAgICByZXR1cm4gc3RvcnlcbiAgICB9KVxufTtcblxuUmVhY3RJbnN0YVN0b3JpZXMuZGVmYXVsdFByb3BzID0ge1xuICAgIHdpZHRoOiAzNjAsXG4gICAgaGVpZ2h0OiA2NDAsXG4gICAgZGVmYXVsdEludGVydmFsOiA0MDAwXG59XG5cbmV4cG9ydCBjb25zdCBXaXRoSGVhZGVyID0gd2l0aEhlYWRlcjtcbmV4cG9ydCBjb25zdCBXaXRoU2VlTW9yZSA9IHdpdGhTZWVNb3JlO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdEluc3RhU3RvcmllcyIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9HbG9iYWwnXG5pbXBvcnQgU3Rvcmllc0NvbnRleHQgZnJvbSAnLi8uLi9jb250ZXh0L1N0b3JpZXMnXG5pbXBvcnQgUHJvZ3Jlc3NDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9Qcm9ncmVzcydcbmltcG9ydCBTdG9yeSBmcm9tICcuL1N0b3J5J1xuaW1wb3J0IFByb2dyZXNzQXJyYXkgZnJvbSAnLi9Qcm9ncmVzc0FycmF5J1xuaW1wb3J0IHsgR2xvYmFsQ3R4LCBTdG9yaWVzQ29udGV4dCBhcyBTdG9yaWVzQ29udGV4dEludGVyZmFjZSB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IFtjdXJyZW50SWQsIHNldEN1cnJlbnRJZF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG4gICAgY29uc3QgW3BhdXNlLCBzZXRQYXVzZV0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKVxuICAgIGNvbnN0IFtidWZmZXJBY3Rpb24sIHNldEJ1ZmZlckFjdGlvbl0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKVxuICAgIGNvbnN0IFt2aWRlb0R1cmF0aW9uLCBzZXRWaWRlb0R1cmF0aW9uXSA9IHVzZVN0YXRlPG51bWJlcj4oMClcblxuICAgIGxldCBtb3VzZWRvd25JZCA9IHVzZVJlZjxhbnk+KCk7XG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGxvb3AsIGN1cnJlbnRJbmRleCwgaXNQYXVzZWQsIGNvbnRyb2xzTmF2aWdhdGlvbiwgcmVuZGVyTmF2aWdhdGlvbkNvbnRyb2wsIGtleWJvYXJkTmF2aWdhdGlvbiwgb25QcmV2aW91c1N0b3J5LCBvbk5leHRTdG9yeSB9ID0gdXNlQ29udGV4dDxHbG9iYWxDdHg+KEdsb2JhbENvbnRleHQpO1xuICAgIGNvbnN0IHsgc3RvcmllcyB9ID0gdXNlQ29udGV4dDxTdG9yaWVzQ29udGV4dEludGVyZmFjZT4oU3Rvcmllc0NvbnRleHQpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50SW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID49IDAgJiYgY3VycmVudEluZGV4IDwgc3Rvcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SWQoY3VycmVudEluZGV4KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbmRleCBvdXQgb2YgYm91bmRzLiBDdXJyZW50IGluZGV4IHdhcyBzZXQgdG8gdmFsdWUgbW9yZSB0aGFuIHRoZSBsZW5ndGggb2Ygc3RvcmllcyBhcnJheS4nLCBjdXJyZW50SW5kZXgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbY3VycmVudEluZGV4XSlcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgaXNQYXVzZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgc2V0UGF1c2UoaXNQYXVzZWQpXG4gICAgICAgIH1cbiAgICB9LCBbaXNQYXVzZWRdKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgaXNDbGllbnQgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50KTtcbiAgICAgICAgaWYgKGlzQ2xpZW50ICYmICh0eXBlb2Yga2V5Ym9hcmROYXZpZ2F0aW9uID09PSAnYm9vbGVhbicgJiYga2V5Ym9hcmROYXZpZ2F0aW9uKSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlS2V5RG93bik7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2N1cnJlbnRJZCwga2V5Ym9hcmROYXZpZ2F0aW9uXSlcblxuICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0xlZnQnKSB7XG4gICAgICAgICAgICBwcmV2aW91cygpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xuICAgICAgICAgICAgbmV4dCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVTdGF0ZSA9IChhY3Rpb246IHN0cmluZywgYnVmZmVyQWN0aW9uPzogYm9vbGVhbikgPT4ge1xuICAgICAgICBzZXRQYXVzZShhY3Rpb24gPT09ICdwYXVzZScpXG4gICAgICAgIHNldEJ1ZmZlckFjdGlvbighIWJ1ZmZlckFjdGlvbilcbiAgICB9XG5cbiAgICBjb25zdCBwcmV2aW91cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaGFzUHJldmlvdXMgPSBjdXJyZW50SWQgPiAwO1xuICAgICAgICBjb25zdCBwcmV2aW91c0lkID0gY3VycmVudElkIC0gMTtcblxuICAgICAgICBzZXRDdXJyZW50SWQoaGFzUHJldmlvdXMgPyBwcmV2aW91c0lkIDogY3VycmVudElkKVxuXG4gICAgICAgIGlmIChvblByZXZpb3VzU3RvcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBoYXNQcmV2aW91cyA/IFtwcmV2aW91c0lkLCBzdG9yaWVzW3ByZXZpb3VzSWRdXSA6IFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgIG9uUHJldmlvdXNTdG9yeSguLi5hcmdzKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmV4dCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgIHVwZGF0ZU5leHRTdG9yeUlkRm9yTG9vcCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVOZXh0U3RvcnlJZCgpXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdXBkYXRlTmV4dFN0b3J5SWRGb3JMb29wID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXh0SWQgPSAoY3VycmVudElkICsgMSkgJSBzdG9yaWVzLmxlbmd0aDtcblxuICAgICAgICBzZXRDdXJyZW50SWQobmV4dElkKVxuXG4gICAgICAgIGlmIChvbk5leHRTdG9yeSkge1xuICAgICAgICAgICAgb25OZXh0U3RvcnkobmV4dElkLCBzdG9yaWVzW25leHRJZF0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVOZXh0U3RvcnlJZCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaGFzTmV4dCA9IGN1cnJlbnRJZCA8IHN0b3JpZXMubGVuZ3RoIC0xXG4gICAgICAgIGNvbnN0IG5leHRJZCA9IGN1cnJlbnRJZCArIDE7XG5cbiAgICAgICAgc2V0Q3VycmVudElkKGhhc05leHQgPyBuZXh0SWQgOiBjdXJyZW50SWQpXG5cbiAgICAgICAgaWYgKG9uTmV4dFN0b3J5KSB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0gaGFzTmV4dCA/IFtuZXh0SWQsIHN0b3JpZXNbbmV4dElkXV0gOiBbbnVsbCwgbnVsbF07XG4gICAgICAgICAgICBvbk5leHRTdG9yeSguLi5hcmdzKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZGVib3VuY2VQYXVzZSA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50IHwgUmVhY3QuVG91Y2hFdmVudCkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgbW91c2Vkb3duSWQuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdG9nZ2xlU3RhdGUoJ3BhdXNlJylcbiAgICAgICAgfSwgMjAwKVxuICAgIH1cblxuICAgIGNvbnN0IG1vdXNlVXAgPSAoZTogUmVhY3QuTW91c2VFdmVudCB8IFJlYWN0LlRvdWNoRXZlbnQsIHR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgbW91c2Vkb3duSWQuY3VycmVudCAmJiBjbGVhclRpbWVvdXQobW91c2Vkb3duSWQuY3VycmVudClcbiAgICAgICAgaWYgKHBhdXNlKSB7XG4gICAgICAgICAgICB0b2dnbGVTdGF0ZSgncGxheScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0eXBlID09PSAnbmV4dCcgPyBuZXh0KCkgOiBwcmV2aW91cygpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnZXRWaWRlb0R1cmF0aW9uID0gKGR1cmF0aW9uOiBudW1iZXIpID0+IHtcbiAgICAgICAgc2V0VmlkZW9EdXJhdGlvbihkdXJhdGlvbiAqIDEwMDApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyAuLi5zdHlsZXMuY29udGFpbmVyLCAuLi57IHdpZHRoLCBoZWlnaHQgfSB9fT5cbiAgICAgICAgICAgIDxQcm9ncmVzc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tcbiAgICAgICAgICAgICAgICBidWZmZXJBY3Rpb246IGJ1ZmZlckFjdGlvbixcbiAgICAgICAgICAgICAgICB2aWRlb0R1cmF0aW9uOiB2aWRlb0R1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJZCxcbiAgICAgICAgICAgICAgICBwYXVzZSxcbiAgICAgICAgICAgICAgICBuZXh0XG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICA8UHJvZ3Jlc3NBcnJheSAvPlxuICAgICAgICAgICAgPC9Qcm9ncmVzc0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgICA8U3RvcnlcbiAgICAgICAgICAgICAgICBhY3Rpb249e3RvZ2dsZVN0YXRlfVxuICAgICAgICAgICAgICAgIGJ1ZmZlckFjdGlvbj17YnVmZmVyQWN0aW9ufVxuICAgICAgICAgICAgICAgIHBsYXlTdGF0ZT17cGF1c2V9XG4gICAgICAgICAgICAgICAgc3Rvcnk9e3N0b3JpZXNbY3VycmVudElkXX1cbiAgICAgICAgICAgICAgICBnZXRWaWRlb0R1cmF0aW9uPXtnZXRWaWRlb0R1cmF0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5vdmVybGF5fT5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiAnNTAlJywgekluZGV4OiA5OTkgfX0gb25Ub3VjaFN0YXJ0PXtkZWJvdW5jZVBhdXNlfSBvblRvdWNoRW5kPXtlID0+IG1vdXNlVXAoZSwgJ3ByZXZpb3VzJyl9IG9uTW91c2VEb3duPXtkZWJvdW5jZVBhdXNlfSBvbk1vdXNlVXA9eyhlKSA9PiBtb3VzZVVwKGUsICdwcmV2aW91cycpfSAvPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6ICc1MCUnLCB6SW5kZXg6IDk5OSB9fSBvblRvdWNoU3RhcnQ9e2RlYm91bmNlUGF1c2V9IG9uVG91Y2hFbmQ9e2UgPT4gbW91c2VVcChlLCAnbmV4dCcpfSBvbk1vdXNlRG93bj17ZGVib3VuY2VQYXVzZX0gb25Nb3VzZVVwPXsoZSkgPT4gbW91c2VVcChlLCAnbmV4dCcpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7KGNvbnRyb2xzTmF2aWdhdGlvbiAmJiByZW5kZXJOYXZpZ2F0aW9uQ29udHJvbCkgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5vdmVybGF5fT5cbiAgICAgICAgICAgICAgICAgICAge3JlbmRlck5hdmlnYXRpb25Db250cm9sKHtkaXJlY3Rpb246ICdwcmV2aW91cycsIG9uQ2xpY2s6IHByZXZpb3VzfSl9XG4gICAgICAgICAgICAgICAgICAgIHtyZW5kZXJOYXZpZ2F0aW9uQ29udHJvbCh7ZGlyZWN0aW9uOiAnbmV4dCcsIG9uQ2xpY2s6IG5leHR9KX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnIzExMScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcbiAgICBvdmVybGF5OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBoZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgICAgd2lkdGg6ICdpbmhlcml0JyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgfVxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTdG9yeVByb3BzLCBHbG9iYWxDdHggfSBmcm9tIFwiLi8uLi9pbnRlcmZhY2VzXCI7XG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi8uLi9jb250ZXh0L0dsb2JhbFwiO1xuXG5jb25zdCBTdG9yeSA9IChwcm9wczogU3RvcnlQcm9wcykgPT4ge1xuXHRjb25zdCBnbG9iYWxDb250ZXh0ID0gdXNlQ29udGV4dDxHbG9iYWxDdHg+KFxuXHRcdEdsb2JhbENvbnRleHRcblx0KTtcblxuXHRjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGxvYWRlciwgaGVhZGVyLCBzdG9yeVN0eWxlcyB9ID0gZ2xvYmFsQ29udGV4dDtcblxuXHRjb25zdCByZW5kZXJlck1lc3NhZ2VIYW5kbGVyID0gKHR5cGU6IHN0cmluZywgZGF0YTogYW55KSA9PiB7XG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlICdVUERBVEVfVklERU9fRFVSQVRJT04nOlxuXHRcdFx0XHRwcm9wcy5nZXRWaWRlb0R1cmF0aW9uKGRhdGEuZHVyYXRpb24pO1xuXHRcdFx0XHRyZXR1cm4geyBhY2s6ICdPSycgYXMgJ09LJyB9XG5cdFx0fVxuXHR9XG5cblx0Y29uc3QgZ2V0U3RvcnlDb250ZW50ID0gKCkgPT4ge1xuXHRcdGxldCBJbm5lckNvbnRlbnQgPSBwcm9wcy5zdG9yeS5jb250ZW50O1xuXHRcdGxldCBjb25maWcgPSB7IHdpZHRoLCBoZWlnaHQsIGxvYWRlciwgaGVhZGVyLCBzdG9yeVN0eWxlcyB9O1xuXHRcdHJldHVybiA8SW5uZXJDb250ZW50XG5cdFx0XHRhY3Rpb249e3Byb3BzLmFjdGlvbn1cblx0XHRcdGlzUGF1c2VkPXtwcm9wcy5wbGF5U3RhdGV9XG5cdFx0XHRzdG9yeT17cHJvcHMuc3Rvcnl9XG5cdFx0XHRjb25maWc9e2NvbmZpZ31cblx0XHRcdG1lc3NhZ2VIYW5kbGVyPXtyZW5kZXJlck1lc3NhZ2VIYW5kbGVyfVxuXHRcdC8+XG5cdH07XG5cblx0cmV0dXJuIChcblx0XHQ8ZGl2IHN0eWxlPXt7IC4uLnN0eWxlcy5zdG9yeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9fT5cblx0XHRcdHtnZXRTdG9yeUNvbnRlbnQoKX1cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmNvbnN0IHN0eWxlcyA9IHtcblx0c3Rvcnk6IHtcblx0XHRkaXNwbGF5OiBcImZsZXhcIixcblx0XHRwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuXHRcdG92ZXJmbG93OiBcImhpZGRlblwiXG5cdH0sXG5cdHN0b3J5Q29udGVudDoge1xuXHRcdHdpZHRoOiBcImF1dG9cIixcblx0XHRtYXhXaWR0aDogXCIxMDAlXCIsXG5cdFx0bWF4SGVpZ2h0OiBcIjEwMCVcIixcblx0XHRtYXJnaW46IFwiYXV0b1wiXG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0b3J5O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSAnLi9Qcm9ncmVzcydcbmltcG9ydCB7IFByb2dyZXNzQ29udGV4dCwgR2xvYmFsQ3R4LCBTdG9yaWVzQ29udGV4dCBhcyBTdG9yaWVzQ29udGV4dEludGVyZmFjZSB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCBQcm9ncmVzc0N0eCBmcm9tICcuLy4uL2NvbnRleHQvUHJvZ3Jlc3MnXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tICcuLy4uL2NvbnRleHQvR2xvYmFsJ1xuaW1wb3J0IFN0b3JpZXNDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9TdG9yaWVzJ1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgY29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG4gICAgY29uc3QgeyBjdXJyZW50SWQsIG5leHQsIHZpZGVvRHVyYXRpb24sIHBhdXNlIH0gPSB1c2VDb250ZXh0PFByb2dyZXNzQ29udGV4dD4oUHJvZ3Jlc3NDdHgpXG4gICAgY29uc3QgeyBkZWZhdWx0SW50ZXJ2YWwsIG9uU3RvcnlFbmQsIG9uU3RvcnlTdGFydCwgb25BbGxTdG9yaWVzRW5kIH0gPSB1c2VDb250ZXh0PEdsb2JhbEN0eD4oR2xvYmFsQ29udGV4dCk7XG4gICAgY29uc3QgeyBzdG9yaWVzIH0gPSB1c2VDb250ZXh0PFN0b3JpZXNDb250ZXh0SW50ZXJmYWNlPihTdG9yaWVzQ29udGV4dCk7XG5cbiAgICBjb25zdCBhbmltYXRpb25GcmFtZUlkID0gdXNlUmVmPG51bWJlcj4oKVxuICAgIGNvbnN0IGNvdW50UmVmID0gdXNlUmVmPG51bWJlcj4oKVxuXG4gICAgY29uc29sZS5sb2coJ3JlbmRlcjo6cGF1c2UnLCB7IHBhdXNlIH0pXG5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygncHJvZ3Jlc3MgYXJyYXk6OnVzZSBlZmZlY3QnKVxuICAgICAgICBmdW5jdGlvbiBpbmNyZW1lbnRDb3VudCgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9ncmVzcyBhcnJheTo6aW5jcmVtZW50IGNvdW50JylcbiAgICAgICAgICAgIGlmIChjb3VudFJlZi5jdXJyZW50ID09PSAwKSBzdG9yeVN0YXJ0Q2FsbGJhY2soKVxuXG5cbiAgICAgICAgICAgIHNldENvdW50KChjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBnZXRDdXJyZW50SW50ZXJ2YWwoKVxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvdW50ID0gTWF0aC5taW4oY291bnQgKyAoMTAwIC8gKChpbnRlcnZhbCAvIDEwMDApICogNjApKSwgMTAwKTtcbiAgICAgICAgICAgICAgICBjb3VudFJlZi5jdXJyZW50ID0gbmV3Q291bnRcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3Q291bnRcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGlmIChjb3VudFJlZi5jdXJyZW50IDwgMTAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Byb2dyZXNzIGFycmF5OjppbmNyZW1lbnQgY291bnQ6OnJhdyByZXRyeScpXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWVJZC5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGluY3JlbWVudENvdW50KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncHJvZ3Jlc3MgYXJyYXk6OmluY3JlbWVudCBjb3VudDo6Y2FuY2VsJylcbiAgICAgICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUlkLmN1cnJlbnQpXG5cbiAgICAgICAgICAgICAgICBzdG9yeUVuZENhbGxiYWNrKClcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SWQgPT09IHN0b3JpZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBhbGxTdG9yaWVzRW5kQ2FsbGJhY2soKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNldENvdW50KDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5leHQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcGF1c2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9ncmVzcyBhcnJheTo6dXNlIGVmZmVjdDo6bm90IHBhdXNlIHN0YXJ0JylcbiAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lSWQuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShpbmNyZW1lbnRDb3VudClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3Byb2dyZXNzIGFycmF5Ojp1c2UgZWZmZWN0Ojp0ZWFyZG93biBjYW5jZWwnKVxuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWVJZC5jdXJyZW50KVxuICAgICAgICB9XG4gICAgfSwgW2N1cnJlbnRJZCwgcGF1c2VdKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0Q291bnQoMClcbiAgICB9LCBbY3VycmVudElkLCBzdG9yaWVzXSlcblxuXG4gICAgY29uc3Qgc3RvcnlTdGFydENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICBvblN0b3J5U3RhcnQgJiYgb25TdG9yeVN0YXJ0KGN1cnJlbnRJZCwgc3Rvcmllc1tjdXJyZW50SWRdKVxuICAgIH1cblxuICAgIGNvbnN0IHN0b3J5RW5kQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIG9uU3RvcnlFbmQgJiYgb25TdG9yeUVuZChjdXJyZW50SWQsIHN0b3JpZXNbY3VycmVudElkXSlcbiAgICB9XG5cbiAgICBjb25zdCBhbGxTdG9yaWVzRW5kQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIG9uQWxsU3Rvcmllc0VuZCAmJiBvbkFsbFN0b3JpZXNFbmQoY3VycmVudElkLCBzdG9yaWVzKVxuICAgIH1cblxuICAgIGNvbnN0IGdldEN1cnJlbnRJbnRlcnZhbCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHN0b3JpZXNbY3VycmVudElkXS50eXBlID09PSAndmlkZW8nKSByZXR1cm4gdmlkZW9EdXJhdGlvblxuICAgICAgICBpZiAodHlwZW9mIHN0b3JpZXNbY3VycmVudElkXS5kdXJhdGlvbiA9PT0gJ251bWJlcicpIHJldHVybiBzdG9yaWVzW2N1cnJlbnRJZF0uZHVyYXRpb25cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRJbnRlcnZhbFxuICAgIH1cblxuICAgIGNvbnN0IGdldEFjdGl2ZVN0YXR1cyA9IChpbmRleDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBjdXJyZW50SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3VudCA+PSAxMDAgPyAyIDogMSBcbiAgICAgICAgfTtcblxuICAgICAgICAgcmV0dXJuIGluZGV4IDwgY3VycmVudElkID8gMiA6IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnByb2dyZXNzQXJyfT5cbiAgICAgICAgICAgIHtzdG9yaWVzLm1hcCgoXywgaSkgPT5cbiAgICAgICAgICAgICAgICA8UHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgICAgICBjb3VudD17Y291bnR9XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZT17Z2V0QWN0aXZlU3RhdHVzKGkpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBwcm9ncmVzc0Fycjoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgZ3JpZEF1dG9GbG93OiAnY29sdW1uJyxcbiAgICAgICAgZ3JpZEdhcDogJzNweCcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhZGRpbmc6ICc5cHgnLFxuICAgICAgICB6SW5kZXg6IDk5LFxuICAgICAgICBmaWx0ZXI6ICdkcm9wLXNoYWRvdygwIDFweCA4cHggIzIyMiknXG4gICAgfVxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBQcm9ncmVzc1Byb3BzLCBQcm9ncmVzc0NvbnRleHQgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgUHJvZ3Jlc3NDdHggZnJvbSAnLi8uLi9jb250ZXh0L1Byb2dyZXNzJ1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHM6IFByb2dyZXNzUHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGFjdGl2ZSwgY291bnQgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgYnVmZmVyQWN0aW9uLCBwYXVzZSB9ID0gdXNlQ29udGV4dDxQcm9ncmVzc0NvbnRleHQ+KFByb2dyZXNzQ3R4KVxuXG4gICAgY29uc3QgZ2V0V3JhcHBlclN0eWxlID0gKCkgPT4gKHtcbiAgICAgICAgb3BhY2l0eTogcGF1c2UgJiYgIWJ1ZmZlckFjdGlvbiA/IDAgOiAxXG4gICAgfSlcblxuICAgIGNvbnN0IGdldFByb2dyZXNzU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoYWN0aXZlKSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgwKWAgfVxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoJHstMTAwICsgY291bnR9JSlgLCBib3JkZXJSYWRpdXM6ICczcHgnIH1cbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0xMDElKWAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0xMDElKWAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyAuLi5zdHlsZXMud3JhcHBlciwgLi4uZ2V0V3JhcHBlclN0eWxlKCkgfX0+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IC4uLnN0eWxlcy5wcm9ncmVzcywgLi4uZ2V0UHJvZ3Jlc3NTdHlsZSgpIH19IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuY29uc3Qgc3R5bGVzOiBhbnkgPSB7XG4gICAgd3JhcHBlcjoge1xuICAgICAgICBoZWlnaHQ6ICcycHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICczcHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnIzU1NScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgNDAwbXMgZWFzZS1pbi1vdXQnXG4gICAgfSxcbiAgICBwcm9ncmVzczoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJ1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSZW5kZXJlciwgU3RvcnksIFRlc3RlciB9IGZyb20gXCIuLi9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRSZW5kZXJlciA9IChzdG9yeTogU3RvcnksIHJlbmRlcmVyczogeyByZW5kZXJlcjogUmVuZGVyZXIsIHRlc3RlcjogVGVzdGVyIH1bXSk6IFJlbmRlcmVyID0+IHtcbiAgICBsZXQgcHJvYmFibGUgPSByZW5kZXJlcnMubWFwKHIgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucixcbiAgICAgICAgICAgIHRlc3RlclJlc3VsdDogci50ZXN0ZXIoc3RvcnkpXG4gICAgICAgIH1cbiAgICB9KS5maWx0ZXIociA9PiByLnRlc3RlclJlc3VsdC5jb25kaXRpb24pO1xuICAgIHByb2JhYmxlLnNvcnQoKGEsIGIpID0+IGIudGVzdGVyUmVzdWx0LnByaW9yaXR5IC0gYS50ZXN0ZXJSZXN1bHQucHJpb3JpdHkpO1xuICAgIHJldHVybiBwcm9iYWJsZVswXS5yZW5kZXJlcjtcbn0iLCJpbXBvcnQgaW1hZ2UgZnJvbSAnLi9JbWFnZSc7XG5pbXBvcnQgdmlkZW8gZnJvbSAnLi9WaWRlbyc7XG5pbXBvcnQgZGVmYXVsdFJlbmRlcmVyIGZyb20gJy4vRGVmYXVsdCc7XG5pbXBvcnQgYXV0b3BsYXlDb250ZW50IGZyb20gJy4vQXV0b1BsYXlDb250ZW50JztcblxuZXhwb3J0IGNvbnN0IHJlbmRlcmVycyA9IFtpbWFnZSwgdmlkZW8sIGF1dG9wbGF5Q29udGVudCwgZGVmYXVsdFJlbmRlcmVyXTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlbmRlcmVyLCBUZXN0ZXIgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IGdsb2JhbFN0eWxlIGZyb20gJy4vLi4vc3R5bGVzLmNzcydcbmltcG9ydCBXaXRoSGVhZGVyIGZyb20gJy4vd3JhcHBlcnMvd2l0aEhlYWRlcic7XG5pbXBvcnQgV2l0aFNlZU1vcmUgZnJvbSAnLi93cmFwcGVycy93aXRoU2VlTW9yZSc7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJlcjogUmVuZGVyZXIgPSAoeyBzdG9yeSwgYWN0aW9uLCBpc1BhdXNlZCwgY29uZmlnIH0pID0+IHtcbiAgICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgbG9hZGVyLCBzdG9yeVN0eWxlcyB9ID0gY29uZmlnO1xuICAgIGxldCBjb21wdXRlZFN0eWxlcyA9IHtcbiAgICAgICAgLi4uc3R5bGVzLnN0b3J5Q29udGVudCxcbiAgICAgICAgLi4uKHN0b3J5U3R5bGVzIHx8IHt9KVxuICAgIH1cblxuICAgIGNvbnN0IGltYWdlTG9hZGVkID0gKCkgPT4ge1xuICAgICAgICBzZXRMb2FkZWQodHJ1ZSk7XG4gICAgICAgIGFjdGlvbigncGxheScpO1xuICAgIH1cblxuICAgIHJldHVybiA8V2l0aEhlYWRlciBzdG9yeT17c3Rvcnl9IGdsb2JhbEhlYWRlcj17Y29uZmlnLmhlYWRlcn0+XG4gICAgICAgIDxXaXRoU2VlTW9yZSBzdG9yeT17c3Rvcnl9IGFjdGlvbj17YWN0aW9ufT5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGltZyBzdHlsZT17Y29tcHV0ZWRTdHlsZXN9IHNyYz17c3RvcnkudXJsfSBvbkxvYWQ9e2ltYWdlTG9hZGVkfSAvPlxuICAgICAgICAgICAgICAgIHshbG9hZGVkICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcInJnYmEoMCwgMCwgMCwgMC45KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNjY2NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge2xvYWRlciB8fCA8ZGl2IGNsYXNzTmFtZT17Z2xvYmFsU3R5bGUuc3Bpbm5lcn0gLz59XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9XaXRoU2VlTW9yZT5cbiAgICA8L1dpdGhIZWFkZXI+XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBzdG9yeToge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCJcbiAgICB9LFxuICAgIHN0b3J5Q29udGVudDoge1xuICAgICAgICB3aWR0aDogXCJhdXRvXCIsXG4gICAgICAgIG1heFdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWFyZ2luOiBcImF1dG9cIlxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0ZXN0ZXI6IFRlc3RlciA9IChzdG9yeSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmRpdGlvbjogIXN0b3J5LmNvbnRlbnQgJiYgKCFzdG9yeS50eXBlIHx8IHN0b3J5LnR5cGUgPT09ICdpbWFnZScpLFxuICAgICAgICBwcmlvcml0eTogMlxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHJlbmRlcmVyLFxuICAgIHRlc3RlclxufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzFDSzdGSFZ3aGlPbnVDaVpKd2lQcTEge1xcblxcdHdpZHRoOiA0MHB4O1xcblxcdGhlaWdodDogNDBweDtcXG5cXHRtYXJnaW46IDEwMHB4IGF1dG87XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG5cXG5cXHRib3JkZXItcmFkaXVzOiAxMDAlO1xcblxcdC13ZWJraXQtYW5pbWF0aW9uOiBfMWhFUTJWeklrVGlaLTlqWm9MSTNKQyAxcyBpbmZpbml0ZSBlYXNlLWluLW91dDtcXG5cXHRhbmltYXRpb246IF8xaEVRMlZ6SWtUaVotOWpab0xJM0pDIDFzIGluZmluaXRlIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgXzFoRVEyVnpJa1RpWi05alpvTEkzSkMge1xcblxcdDAlIHtcXG5cXHRcXHQtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuXFx0fVxcblxcdDEwMCUge1xcblxcdFxcdC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG5cXHRcXHRvcGFjaXR5OiAwO1xcblxcdH1cXG59XFxuXFxuQGtleWZyYW1lcyBfMWhFUTJWeklrVGlaLTlqWm9MSTNKQyB7XFxuXFx0MCUge1xcblxcdFxcdC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG5cXHRcXHR0cmFuc2Zvcm06IHNjYWxlKDApO1xcblxcdH1cXG5cXHQxMDAlIHtcXG5cXHRcXHQtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuXFx0XFx0dHJhbnNmb3JtOiBzY2FsZSgxKTtcXG5cXHRcXHRvcGFjaXR5OiAwO1xcblxcdH1cXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcInNwaW5uZXJcIjogXCJfMUNLN0ZIVndoaU9udUNpWkp3aVBxMVwiLFxuXHRcInNrLXNjYWxlb3V0XCI6IFwiXzFoRVEyVnpJa1RpWi05alpvTEkzSkNcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEhlYWRlclByb3BzIH0gZnJvbSAnLi8uLi9pbnRlcmZhY2VzJ1xuXG5jb25zdCBIZWFkZXIgPSAoeyBwcm9maWxlSW1hZ2UsIGhlYWRpbmcsIHN1YmhlYWRpbmcgfTogSGVhZGVyUHJvcHMpID0+XG4gICAgPGRpdiBzdHlsZT17c3R5bGVzLm1haW59PlxuICAgICAgICB7cHJvZmlsZUltYWdlICYmIDxpbWcgc3R5bGU9e3N0eWxlcy5pbWd9IHNyYz17cHJvZmlsZUltYWdlfSAvPn1cbiAgICAgICAgPHNwYW4gc3R5bGU9e3N0eWxlcy50ZXh0fT5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuaGVhZGluZ30+e2hlYWRpbmd9PC9wPlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5zdWJoZWFkaW5nfT57c3ViaGVhZGluZ308L3A+XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIG1haW46IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG4gICAgaW1nOiB7XG4gICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgaGVpZ2h0OiA0MCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA0MCxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDEwLFxuICAgICAgICBmaWx0ZXI6ICdkcm9wLXNoYWRvdygwIDBweCAycHggcmdiYSgwLCAwLCAwLCAwLjUpKScsXG4gICAgICAgIGJvcmRlcjogJzJweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIGZpbHRlcjogJ2Ryb3Atc2hhZG93KDAgMHB4IDNweCByZ2JhKDAsIDAsIDAsIDAuOSkpJ1xuICAgIH0sXG4gICAgaGVhZGluZzoge1xuICAgICAgICBmb250U2l6ZTogJzFyZW0nLFxuICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC45KScsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAyXG4gICAgfSxcbiAgICBzdWJoZWFkaW5nOiB7XG4gICAgICAgIGZvbnRTaXplOiAnMC42cmVtJyxcbiAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknLFxuICAgICAgICBtYXJnaW46IDBcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlciIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9HbG9iYWwnXG5pbXBvcnQgeyBHbG9iYWxDdHggfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgeyBTZWVNb3JlUHJvcHMgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlZU1vcmUocHJvcHM6IFNlZU1vcmVQcm9wcykge1xuICAgIGNvbnN0IFNlZU1vcmVDb250ZW50ID0gcHJvcHMuc2VlTW9yZUNvbnRlbnQ7XG4gICAgY29uc3QgQ3VzdG9tQ29sbGFwc2VkID0gcHJvcHMuY3VzdG9tQ29sbGFwc2VkO1xuXG4gICAgY29uc3QgeyBrZXlib2FyZE5hdmlnYXRpb24gfSA9IHVzZUNvbnRleHQ8R2xvYmFsQ3R4PihHbG9iYWxDb250ZXh0KTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzQ2xpZW50ID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCk7XG4gICAgICAgIGlmIChpc0NsaWVudCAmJiAodHlwZW9mIGtleWJvYXJkTmF2aWdhdGlvbiA9PT0gJ2Jvb2xlYW4nICYmIGtleWJvYXJkTmF2aWdhdGlvbikpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtrZXlib2FyZE5hdmlnYXRpb25dKVxuXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIHByb3BzLnRvZ2dsZU1vcmUodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicgfHwgZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIHByb3BzLnRvZ2dsZU1vcmUoZmFsc2UpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICBwcm9wcy5zaG93Q29udGVudFxuICAgICAgICAgICAgPyA8ZGl2IHN0eWxlPXtzdHlsZXMuc2VlTW9yZUV4cGFuZGVkfT5cbiAgICAgICAgICAgICAgICA8U2VlTW9yZUNvbnRlbnQgY2xvc2U9eygpID0+IHByb3BzLnRvZ2dsZU1vcmUoZmFsc2UpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAoQ3VzdG9tQ29sbGFwc2VkID8gPEN1c3RvbUNvbGxhcHNlZCBhY3Rpb249e3Byb3BzLmFjdGlvbn0gdG9nZ2xlTW9yZT17cHJvcHMudG9nZ2xlTW9yZX0gLz4gOiA8ZGl2IHN0eWxlPXtzdHlsZXMuc2VlTW9yZX0gb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBwcm9wcy50b2dnbGVNb3JlKHRydWUpXG4gICAgICAgICAgICB9fSA+XG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3N0eWxlcy5zZWVNb3JlSWNvbn0+4oyDPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXtzdHlsZXMuc2VlTW9yZVRleHR9PlNlZSBtb3JlPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApXG4gICAgKVxufVxuXG5jb25zdCBzdHlsZXM6IGFueSA9IHtcbiAgICBzZWVNb3JlOiB7XG4gICAgICAgIGhlaWdodDogXCIxMHZoXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwibGluZWFyLWdyYWRpZW50KHJnYmEoMCwgMCwgMCwgMCksIHJnYmEoMCwgMCwgMCwgMC4yKSlcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiZmxleC1lbmRcIixcbiAgICAgICAgYm90dG9tOiAwXG4gICAgfSxcbiAgICBzZWVNb3JlRXhwYW5kZWQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICB6SW5kZXg6IDk5OTk5XG4gICAgfSxcbiAgICBzZWVNb3JlVGV4dDoge1xuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IFwiMC4xZW1cIixcbiAgICAgICAgbWFyZ2luQm90dG9tOiBcIjIuMnZoXCIsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06IFwiY2FwaXRhbGl6ZVwiLFxuICAgICAgICBvcGFjaXR5OiBcIjFcIixcbiAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDMwMG1zIGVhc2UtaW4tb3V0XCJcbiAgICB9LFxuICAgIHNlZU1vcmVJY29uOiB7XG4gICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgbGV0dGVyU3BhY2luZzogXCIwLjJlbVwiLFxuICAgICAgICBtYXJnaW5Cb3R0b206IFwiMC40dmhcIixcbiAgICAgICAgb3BhY2l0eTogXCIxXCIsXG4gICAgICAgIGZpbHRlcjogXCJkcm9wLXNoYWRvdygwIDAgNXB4IGJsYWNrKVwiLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiBcImNhcGl0YWxpemVcIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDMwMG1zIGVhc2UtaW4tb3V0XCJcbiAgICB9LFxuICAgIHNlZU1vcmVDbG9zZToge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICBmaWx0ZXI6IFwiZHJvcC1zaGFkb3coMCAzcHggMnB4ICNjY2MpXCIsXG4gICAgICAgIHJpZ2h0OiBcIjAuNXJlbVwiLFxuICAgICAgICB0b3A6IFwiMC41cmVtXCIsXG4gICAgICAgIGZvbnRTaXplOiBcIjEuNXJlbVwiLFxuICAgICAgICBvcGFjaXR5OiBcIjAuN1wiLFxuICAgICAgICBwYWRkaW5nOiBcIjFyZW1cIlxuICAgIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZW5kZXJlciwgVGVzdGVyIH0gZnJvbSAnLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBnbG9iYWxTdHlsZSBmcm9tICcuLy4uL3N0eWxlcy5jc3MnXG5pbXBvcnQgV2l0aEhlYWRlciBmcm9tICcuL3dyYXBwZXJzL3dpdGhIZWFkZXInO1xuaW1wb3J0IFdpdGhTZWVNb3JlIGZyb20gJy4vd3JhcHBlcnMvd2l0aFNlZU1vcmUnO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyZXI6IFJlbmRlcmVyID0gKHsgc3RvcnksIGFjdGlvbiwgaXNQYXVzZWQsIGNvbmZpZywgbWVzc2FnZUhhbmRsZXIgfSkgPT4ge1xuICAgIGNvbnN0IFtsb2FkZWQsIHNldExvYWRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW211dGVkLCBzZXRNdXRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBsb2FkZXIsIHN0b3J5U3R5bGVzIH0gPSBjb25maWc7XG5cbiAgICBsZXQgY29tcHV0ZWRTdHlsZXMgPSB7XG4gICAgICAgIC4uLnN0eWxlcy5zdG9yeUNvbnRlbnQsXG4gICAgICAgIC4uLihzdG9yeVN0eWxlcyB8fCB7fSlcbiAgICB9XG5cbiAgICBsZXQgdmlkID0gUmVhY3QudXNlUmVmPEhUTUxWaWRlb0VsZW1lbnQ+KG51bGwpO1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgYWN0aW9uKCdwYXVzZScsIHRydWUpXG4gICAgfSwgW10pXG5cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodmlkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmIChpc1BhdXNlZCkge1xuICAgICAgICAgICAgICAgIHZpZC5jdXJyZW50LnBhdXNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZpZC5jdXJyZW50LnBsYXkoKS5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2lzUGF1c2VkXSk7XG5cbiAgICBjb25zdCBvbldhaXRpbmcgPSAoKSA9PiB7XG4gICAgICAgIGFjdGlvbihcInBhdXNlXCIsIHRydWUpO1xuICAgIH1cblxuICAgIGNvbnN0IG9uUGxheWluZyA9ICgpID0+IHtcbiAgICAgICAgYWN0aW9uKFwicGxheVwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICBjb25zdCB2aWRlb0xvYWRlZCA9ICgpID0+IHtcbiAgICAgICAgbWVzc2FnZUhhbmRsZXIoJ1VQREFURV9WSURFT19EVVJBVElPTicsIHsgZHVyYXRpb246IHZpZC5jdXJyZW50LmR1cmF0aW9uIH0pO1xuICAgICAgICBzZXRMb2FkZWQodHJ1ZSk7XG4gICAgICAgIHZpZC5jdXJyZW50LnBsYXkoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGFjdGlvbigncGxheScpO1xuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICBzZXRNdXRlZCh0cnVlKTtcbiAgICAgICAgICAgIHZpZC5jdXJyZW50LnBsYXkoKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICBhY3Rpb24oJ3BsYXknKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiA8V2l0aEhlYWRlciBzdG9yeT17c3Rvcnl9IGdsb2JhbEhlYWRlcj17Y29uZmlnLmhlYWRlcn0+XG4gICAgICAgIDxXaXRoU2VlTW9yZSBzdG9yeT17c3Rvcnl9IGFjdGlvbj17YWN0aW9ufT5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy52aWRlb0NvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgPHZpZGVvXG4gICAgICAgICAgICAgICAgICAgIHJlZj17dmlkfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17Y29tcHV0ZWRTdHlsZXN9XG4gICAgICAgICAgICAgICAgICAgIHNyYz17c3RvcnkudXJsfVxuICAgICAgICAgICAgICAgICAgICBjb250cm9scz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgIG9uTG9hZGVkRGF0YT17dmlkZW9Mb2FkZWR9XG4gICAgICAgICAgICAgICAgICAgIHBsYXlzSW5saW5lXG4gICAgICAgICAgICAgICAgICAgIG9uV2FpdGluZz17b25XYWl0aW5nfVxuICAgICAgICAgICAgICAgICAgICBvblBsYXlpbmc9e29uUGxheWluZ31cbiAgICAgICAgICAgICAgICAgICAgbXV0ZWQ9e211dGVkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgeyFsb2FkZWQgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLCAwLCAwLCAwLjkpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgekluZGV4OiA5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI2NjY1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bG9hZGVyIHx8IDxkaXYgY2xhc3NOYW1lPXtnbG9iYWxTdHlsZS5zcGlubmVyfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1dpdGhTZWVNb3JlPlxuICAgIDwvV2l0aEhlYWRlcj5cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIHN0b3J5Q29udGVudDoge1xuICAgICAgICB3aWR0aDogXCJhdXRvXCIsXG4gICAgICAgIG1heFdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWFyZ2luOiBcImF1dG9cIlxuICAgIH0sXG4gICAgdmlkZW9Db250YWluZXI6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRlc3RlcjogVGVzdGVyID0gKHN0b3J5KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZGl0aW9uOiBzdG9yeS50eXBlID09PSAndmlkZW8nLFxuICAgICAgICBwcmlvcml0eTogMlxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHJlbmRlcmVyLFxuICAgIHRlc3RlclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlbmRlcmVyLCBUZXN0ZXIgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IGdsb2JhbFN0eWxlIGZyb20gJy4vLi4vc3R5bGVzLmNzcydcbmltcG9ydCBXaXRoSGVhZGVyIGZyb20gJy4vd3JhcHBlcnMvd2l0aEhlYWRlcic7XG5pbXBvcnQgV2l0aFNlZU1vcmUgZnJvbSAnLi93cmFwcGVycy93aXRoU2VlTW9yZSc7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJlcjogUmVuZGVyZXIgPSAoeyBzdG9yeSwgYWN0aW9uIH0pID0+IHtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBhY3Rpb24oJ3BsYXknKTtcbiAgICB9LCBbc3RvcnldKVxuXG4gICAgcmV0dXJuIDxkaXYgc3R5bGU9e3N0eWxlcy5zdG9yeUNvbnRlbnR9PlxuICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnRleHR9PlRoaXMgc3RvcnkgY291bGQgbm90IGJlIGxvYWRlZC48L3A+XG4gICAgPC9kaXY+XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBzdG9yeUNvbnRlbnQ6IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBtYXhIZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBtYXJnaW46IFwiYXV0b1wiXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICB3aWR0aDogJzkwJScsXG4gICAgICAgIG1hcmdpbjogJ2F1dG8nXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRlc3RlcjogVGVzdGVyID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmRpdGlvbjogdHJ1ZSxcbiAgICAgICAgcHJpb3JpdHk6IDFcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcmVuZGVyZXIsXG4gICAgdGVzdGVyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVuZGVyZXIsIFRlc3RlciB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJlcjogUmVuZGVyZXIgPSAocHJvcHMpID0+IHtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBwcm9wcy5hY3Rpb24oJ3BsYXknKTtcbiAgICB9LCBbcHJvcHMuc3RvcnldKVxuICAgIGNvbnN0IENvbnRlbnQgPSBwcm9wcy5zdG9yeS5vcmlnaW5hbENvbnRlbnQ7XG4gICAgcmV0dXJuIDxDb250ZW50IHsuLi5wcm9wc30gLz5cbn1cblxuZXhwb3J0IGNvbnN0IHRlc3RlcjogVGVzdGVyID0gKHN0b3J5KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZGl0aW9uOiAhIXN0b3J5LmNvbnRlbnQsXG4gICAgICAgIHByaW9yaXR5OiAyXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcmVuZGVyZXIsXG4gICAgdGVzdGVyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==